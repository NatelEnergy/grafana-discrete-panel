/// <reference path="../node_modules/grafana-sdk-mocks/app/headers/common.d.ts" />
import {CanvasPanelCtrl} from './canvas-metric';
declare class DiscretePanelCtrl extends CanvasPanelCtrl {
  static templateUrl: string;
  static scrollable: boolean;
  defaults: {
    display: string;
    rowHeight: number;
    valueMaps: {
      value: string;
      op: string;
      text: string;
    }[];
    rangeMaps: {
      from: string;
      to: string;
      text: string;
    }[];
    colorMaps: {
      text: string;
      color: string;
    }[];
    metricNameColor: string;
    valueTextColor: string;
    timeTextColor: string;
    crosshairColor: string;
    backgroundColor: string;
    lineColor: string;
    textSize: number;
    textSizeTime: number;
    extendLastValue: boolean;
    writeLastValue: boolean;
    writeAllValues: boolean;
    writeMetricNames: boolean;
    showTimeAxis: boolean;
    showLegend: boolean;
    showLegendNames: boolean;
    showLegendValues: boolean;
    showLegendPercent: boolean;
    highlightOnMouseover: boolean;
    expandFromQueryS: number;
    legendSortBy: string;
    units: string;
    adjFontSize: boolean;
    FontSize: string;
    FontSizeValue: string;
    nullValue: boolean;
  };
  translate: any;
  data: any;
  externalPT: boolean;
  isTimeline: boolean;
  isStacked: boolean;
  hoverPoint: any;
  colorMap: any;
  _colorsPaleteCash: any;
  unitFormats: any;
  formatter: any;
  fontSizes: any;
  fontCalc: any;
  _renderDimensions: any;
  _selectionMatrix: Array<Array<String>>;
  noPoints: boolean;
  timeSrv: any;
  constructor($scope: any, $injector: any);
  onDataSnapshotLoad(snapshotData: any): void;
  onPanelInitialized(): void;
  onDataError(err: any): void;
  onInitEditMode(): void;
  onRender(): void;
  showLegandTooltip(pos: any, info: any): void;
  clearTT(): void;
  formatValue(val: any): any;
  getColor(val: any): any;
  checkValidValueMapping(val: any): boolean;
  mappingColorsPaleteCash(val: any, c: any): void;
  randomColor(): string;
  applyPanelTimeOverrides(): void;
  onDataReceived(dataList: any): void;
  exportReportCsv(): void;
  removeColorMap(map: any): void;
  updateColorInfo(): void;
  addColorMap(what: any): void;
  removeValueMap(map: any): void;
  addValueMap(): void;
  removeRangeMap(rangeMap: any): void;
  addRangeMap(): void;
  onConfigChanged(update?: boolean): void;
  getFontSize(fontSize: any): any;
  getLegendDisplay(info: any, metric: any): any;
  showTooltip(evt: any, point: any, isExternal: any): void;
  onGraphHover(evt: any, showTT: any, isExternal: any): void;
  onMouseClicked(where: any): void;
  onMouseSelectedRange(range: any): void;
  clear(): void;
  _updateRenderDimensions(): void;
  _updateSelectionMatrix(): void;
  _updateCanvasSize(): void;
  _getVal(metricIndex: any, rectIndex: any): any;
  _renderRects(): void;
  _renderLabels(): void;
  _renderSelection(): void;
  _renderTimeAxis(): void;
  timeFormatFun(date: Date, timeFormat: any): any;
  _renderCrosshair(): void;
  handleValueTextChange(valueMap: any): void;
  handleRangeTextChange(rangeMap: any): void;
  handleLegnedFontSizeChange(): void;
  handleFontSizeChange(): void;
  formatDatas(): any[];
  initI18n(): void;
}
export {DiscretePanelCtrl as PanelCtrl};
